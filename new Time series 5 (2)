{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "13be61d9-3d01-4a2b-bbd1-36150c499009",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "With this date object, create a series with datetime index:\n",
      " 2020-01-05    0.122474\n",
      "2025-01-10    1.012220\n",
      "2025-01-15   -1.990571\n",
      "2025-01-20   -1.218320\n",
      "2025-01-25   -1.019480\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from datetime import datetime\n",
    "dates = [datetime(2020,1,5),\n",
    "datetime(2025,1,10),\n",
    "datetime(2025,1,15),\n",
    "datetime(2025,1,20),\n",
    "datetime(2025,1,25)]\n",
    "ts = pd.Series(np.random.randn(5), index=dates)\n",
    "print(\"\\nWith this date object, create a series with datetime index:\\n\",ts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "40e8415b-83c9-4626-96d9-6e040a45ddd4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Truncate method to truncate datetime series \n",
      " 2020-01-05    0.122474\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "res=ts.truncate(after=\"1/3/2025\")\n",
    "print(\"\\nTruncate method to truncate datetime series \\n\", res)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "774c834d-210e-46ad-9887-82fd6374c23d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Date range with day periods.\n",
      " DatetimeIndex(['2025-10-05', '2025-10-12', '2025-10-19', '2025-10-26',\n",
      "               '2025-11-02', '2025-11-09', '2025-11-16', '2025-11-23',\n",
      "               '2025-11-30', '2025-12-07'],\n",
      "              dtype='datetime64[ns]', freq='W-SUN')\n"
     ]
    }
   ],
   "source": [
    "da=pd.date_range(\"10/4/2025\", periods=10, freq=\"W-SUN\")\n",
    "print(\"\\nDate range with day periods.\\n\",da)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "8daa2452-36d1-4e13-b1a2-8c91063c056c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Duplicate datetime index:\n",
      " 2025-01-04    0\n",
      "2025-01-05    1\n",
      "2025-01-04    2\n",
      "2025-01-04    3\n",
      "2025-01-06    4\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "date=pd.DatetimeIndex([\"1/4/2025\",\"1/5/2025\",\"1/4/2025\",\"1/4/2025\",\"1/6/2025\"])\n",
    "ts1=pd.Series(np.arange(5), index=date)\n",
    "print(\"\\nDuplicate datetime index:\\n\",ts1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "09a771ce-d065-4b58-8601-efa1985543a2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Repeated date counts:\n",
      " 2020-01-01    1\n",
      "2020-01-02    3\n",
      "2020-01-03    1\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "group=ts1.groupby(level=0)\n",
    "print(\"\\nRepeated date counts:\\n\",group.count())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "93cfa3d1-2cf9-4b45-82ee-8d0764c6c6e0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Multi-column DataFrame with datatime index:\n",
      "                    A         B         C         D\n",
      "2022-10-02  0.166165 -0.492725 -0.781249 -0.971749\n",
      "2022-10-09  0.065550 -1.042500 -0.256834 -0.921764\n",
      "2022-10-16  2.776951 -0.985812  0.657525  0.429430\n",
      "2022-10-23 -0.538004 -0.336666  0.234305  0.724873\n",
      "2022-10-30 -0.696178  1.162038  1.253132  0.396388\n",
      "2022-11-06  1.395201 -0.507692  0.109807  0.786136\n",
      "2022-11-13  1.013477  0.651759 -0.465488  1.340988\n",
      "2022-11-20 -1.008976  1.220458 -0.135299 -1.515970\n",
      "2022-11-27  0.858048 -0.035552 -0.741450  0.240498\n",
      "2022-12-04 -1.047516 -0.256335 -1.324506 -0.700028\n"
     ]
    }
   ],
   "source": [
    "long_df=pd.DataFrame(np.random.randn(10,4),index=da,columns=list(\"ABCD\"))\n",
    "print(\"\\nMulti-column DataFrame with datatime index:\\n\",long_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b2b1d862-2556-4d0d-a090-d3ace595859f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
